#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

#define d 256
#define q 997

/**
 * @class RabinKarpSearcher
 * @brief Класс для поиска всех вхождений шаблона в текст с использованием алгоритма Рабина-Карпа.
 *
 * Класс выполняет поиск подстроки (шаблона) в основном тексте, используя алгоритм Рабина-Карпа.
 * Этот метод основан на хэшировании и позволяет эффективно находить все вхождения шаблона.
 */
class RabinKarpSearcher {
private:
    string text_; ///< Основной текст для поиска.
    string pattern_; ///< Шаблон для поиска.
public:
    /**
     * @brief Конструктор класса RabinKarpSearcher.
     *
     * Инициализирует объект класса с текстом и шаблоном для поиска.
     *
     * @param text Строка, представляющая основной текст.
     * @param pattern Строка, представляющая шаблон для поиска.
     */
    RabinKarpSearcher(const string& text, const string& pattern);
    
    /**
     * @brief Выполняет поиск всех вхождений шаблона в текст.
     *
     * Используется алгоритм Рабина-Карпа для поиска подстроки. Метод вычисляет хэш-коды для
     * шаблона и подстрок текста, а затем проверяет совпадения.
     *
     * @return vector<int> Вектор индексов, на которых начинаются все вхождения шаблона в текст.
     */
    vector<int> search();
    int k = 0;
};

/**
 * @class FileManager
 * @brief Класс для работы с файлами.
 *
 * Класс содержит методы для чтения файлов и обработки ошибок.
 */
class FileManager {
public:
    /**
     * @brief Чтение содержимого файла.
     *
     * Открывает файл и возвращает его содержимое в виде строки. Если файл не удается
     * открыть, выводится сообщение об ошибке.
     *
     * @param filename Имя файла, который необходимо прочитать.
     * @return string Содержимое файла.
     */
    static string readFile(const string& filename);
};

